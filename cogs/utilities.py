import disnake
from disnake.ext import commands
from googletrans import Translator
from disnake import ui
import asyncio
import os

owner = 386439272455995394
uowner = 1051530567486808115
testers = 702443229924032512, 846090153583968326

class classicCog(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    @commands.slash_command(name="translator", description="–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏.")
    async def translator(self, ctx, lang, *, phrase):
        try:
            await ctx.response.defer()
            translator = Translator()
            translation = translator.translate(phrase, dest=lang)
            emb = disnake.Embed(title=f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! [ {phrase} ]", description=f"–í–∞—à –ø–µ—Ä–µ–≤–æ–¥ - {translation.text}", color=disnake.Color.random())
            emb.set_footer(text="Molzy Production", icon_url=ctx.bot.user.avatar)
            await ctx.followup.send(embed = emb)
        except Exception as e:
            embed = disnake.Embed(title="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ", description=str(e), color=0xFF0004)
            embed.set_footer(text="Molzy Production", icon_url=ctx.bot.user.avatar)
            await ctx.followup.send(embed=embed)

    @commands.command()
    async def profile(self, ctx, member: disnake.Member = None):
        member = member or ctx.author

        roles = [role.mention for role in member.roles[1:]]

        view = ProfileView(self.bot, ctx.author.id)

        status = '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' if member.id == owner else '–≠—Ç–æ —è!' if member.id == ctx.bot.user.id else '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫' if member.id in testers else '–°–æ-–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' if member.id == uowner else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

        emb = disnake.Embed(description=member.activity or "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", color=disnake.Color.random())
        emb.set_author(name=member.name, icon_url=member.avatar.url)
        emb.set_thumbnail(url=member.avatar.url)
        emb.add_field(name="üë§ | –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", value=f"{member.display_name}", inline=False)
        emb.add_field(name="üíª | –°—Ç–∞—Ç—É—Å –≤ –±–æ—Ç–µ:", value=status, inline=False)
        emb.add_field(name="‚öôÔ∏è | ID –£—á–∞—Å—Ç–Ω–∏–∫–∞:", value=member.id, inline=False)
        emb.add_field(name="üïµüèª | –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:", value=member.created_at.strftime("%d.%m.%Y %H:%M:%S"), inline=False)
        emb.add_field(name="üéôÔ∏è | –°—Ç–∞—Ç—É—Å:", value=str(member.status).capitalize(), inline=False)

        file_path = f'age_folder/{member.id}.txt'
        if os.path.exists(file_path):
            with open(file_path, 'r') as file:
                content = file.read()
                age = int(content) if content.isdigit() else "–ù–µ —É–∫–∞–∑–∞–Ω."
        else:
            age = "–ù–µ —É–∫–∞–∑–∞–Ω."
        emb.add_field(name="üîÆ | –í–æ–∑—Ä–∞—Å—Ç:", value=age, inline=False)

        if member.id != ctx.author.id:
            view.children = [] 

        view.bot = self.bot
        await ctx.send(embed=emb, view=view)

    @commands.command()
    @commands.has_permissions(manage_emojis=True)
    async def emoji(self, ctx, emoji: disnake.PartialEmoji, name: str = None):
        ownerr = self.bot.get_user(owner)
        guild = ctx.message.guild

        if not guild:
            return
       
        emoji_bytes = await emoji.read()
        emoji_name = name or emoji.name
        new_emoji = await guild.create_custom_emoji(name=emoji_name, image=emoji_bytes)

        embed = disnake.Embed(
                title='‚úÖ –≠–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–ª–µ–Ω.',
                description=f'–≠–º–æ–¥–∑–∏ {new_emoji} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –∏–º–µ–Ω–µ–º: `{emoji_name}`',
                color=disnake.Color.green()
            )
        embed.set_footer(text="Molzy Production", icon_url=ownerr.avatar.url)
        await ctx.send(embed=embed)

    @commands.slash_command(name="server-info", description="–ü–æ–∫–∞–∂—É –∏–Ω—Ñ—É –æ —Å–µ—Ä–≤–µ—Ä–µ))")
    async def serverstats(self, ctx):
        guild = ctx.guild
        total_members = guild.member_count
        online_members = sum(1 for member in guild.members if member.status != disnake.Status.offline)
        text_channels = len(guild.text_channels)
        voice_channels = len(guild.voice_channels)
        categories = len(guild.categories)
        roles = len(guild.roles)
        emojis = len(guild.emojis)
        created_at = guild.created_at.strftime("%Y-%m-%d %H:%M:%S")
        owner = guild.owner
        premium_tier = guild.premium_tier
        boosters = len(guild.premium_subscribers)
        verification_level = guild.verification_level
        region = guild.region

        embed = disnake.Embed(title=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {guild.name}", color=disnake.Color.blurple())

        basic_info = (
            f"–í–ª–∞–¥–µ–ª–µ—Ü: **{owner.name}**",
            f"–†–µ–≥–∏–æ–Ω: **{region}**",
            f"–£—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞: **{premium_tier}**",
            f"–ë—É—Å—Ç–µ—Ä—ã: **{boosters}**",
        )
        guilds_info = (
            f"–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–≤–µ—Ä–∫–∏: **{verification_level}**",
            f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **{total_members}**",
            f"–û–Ω–ª–∞–π–Ω: **{online_members}**",
            f"–°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω: **{created_at}**",
        )
        other_info = (
            f"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã: **{text_channels}**",
            f"–ì–æ–ª–æ—Å–æ–≤—ã–µ: **{voice_channels}**",
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: **{categories}**",
            f"–†–æ–ª–∏: **{roles}**",
            f"–≠–º–æ–¥–∑–∏: **{emojis}**",
        )

        embed.add_field(name="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value='\n'.join(basic_info), inline=False)
        embed.add_field(name="–û —Å–µ—Ä–≤–µ—Ä–µ", value='\n'.join(guilds_info), inline=False)
        embed.add_field(name="–ö–∞–Ω–∞–ª—ã, —Ä–æ–ª–∏ –∏ —ç–º–æ–¥–∑–∏", value='\n'.join(other_info), inline=False)
        embed.set_thumbnail(guild.icon.url)
        embed.set_footer(text="Molzy Production", icon_url=ctx.bot.user.avatar.url)

        await ctx.send(embed=embed)

class ProfileView(ui.View):
    def __init__(self, bot, author_id):
        super().__init__()
        self.timeout = 20
        self.age = None
        self.bot = bot
        self.author_id = author_id

    async def interaction_check(self, interaction: disnake.MessageInteraction) -> bool:
        return interaction.user.id == self.author_id

    @ui.button(label="–£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", style=disnake.ButtonStyle.primary)
    async def set_age(self, button: disnake.ui.Button, interaction: disnake.MessageInteraction):

        await interaction.response.defer()
        try:
            age_msg = await interaction.channel.send("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, —É –≤–∞—Å –µ—Å—Ç—å 20 —Å–µ–∫—É–Ω–¥.")

            def check_age(m):
                return m.author == interaction.user and m.channel == age_msg.channel

            age_response = await self.bot.wait_for("message", check=check_age, timeout=self.timeout)

            if age_response.content.isdigit() and 14 <= int(age_response.content) < 100:
                self.age = int(age_response.content)
                await age_msg.delete()
                await age_response.add_reaction("‚úÖ")
                
                data_folder = "age_folder"
                if not os.path.exists(data_folder):
                    os.makedirs(data_folder)

                file_path = os.path.join(data_folder, f"{interaction.user.id}.txt")
                with open(file_path, "w") as file:
                    file.write(str(self.age))
            else:
                await age_msg.delete()
                embed = disnake.Embed(title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", description="–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 14 –¥–æ 100 –ª–µ—Ç.", color=disnake.Color.brand_red())
                await interaction.channel.send(embed=embed, delete_after=10)
                return

        except asyncio.TimeoutError:
            await age_msg.delete()
            await interaction.channel.send("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", delete_after=5)
            return

def setup(bot: commands.Bot):
    bot.add_cog(classicCog(bot))